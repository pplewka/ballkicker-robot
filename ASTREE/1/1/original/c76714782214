/* ----------------------------------------------------------------------
 *    AbsInt -- Angewandte Informatik GmbH
 *    http://www.AbsInt.de/
 * ----------------------------------------------------------------------
 *
 * Example implementation of the ISO/IEC 9899:1999 (E) standard C
 * library for static program analyses with Astree.
 *
 * Developed and distributed by AbsInt, under license from the CNRS/ENS.
 * ---------------------------------------------------------------------- */

#pragma once

#include <stddef.h>
#include <stdarg.h>
#include <astree_restrict.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct { char dummy; } FILE;

typedef int fpos_t;

#ifdef _IOFBF
#undef _IOFBF
#endif
#define _IOFBF 1
#ifdef _IOLBF
#undef _IOLBF
#endif
#define _IOLBF 2
#ifdef _IONBF
#undef _IONBF
#endif
#define _IONBF 3

#ifdef BUFSIZ
#undef BUFSIZ
#endif
#define BUFSIZ 256

#ifdef EOF
#undef EOF
#endif
#ifdef __ASTREE_CLANG_COMPATIBLE
#define EOF (-1)
#else
#define EOF (__astree_eof())
#endif

#ifdef FOPEN_MAX
#undef FOPEN_MAX
#endif
#define FOPEN_MAX 256
#ifdef FILENAME_MAX
#undef FILENAME_MAX
#endif
#define FILENAME_MAX 256

#ifdef L_tmpnam
#undef L_tmpnam
#endif
#define L_tmpnam 20

#ifdef SEEK_CUR
#undef SEEK_CUR
#endif
#define SEEK_CUR 1
#ifdef SEEK_END
#undef SEEK_END
#endif
#define SEEK_END 2
#ifdef SEEK_SET
#undef SEEK_SET
#endif
#define SEEK_SET 0

#ifdef TMP_MAX
#undef TMP_MAX
#endif
#define TMP_MAX 1024

extern FILE* stderr;
extern FILE* stdin;
extern FILE* stdout;

int remove(const char *filename);
int rename(const char *oldname, const char *newname);
FILE* tmpfile(void);
char* tmpnam(char* s);
int fclose(FILE* stream);
int fflush(FILE* stream);
FILE* fopen(const char* __ASTREE_restrict filename, const char* __ASTREE_restrict mode);
FILE* freopen(const char* __ASTREE_restrict filename, const char* __ASTREE_restrict mode, FILE* stream);
void setbuf(FILE* __ASTREE_restrict stream, char* __ASTREE_restrict buf);
int setvbuf(FILE* __ASTREE_restrict stream, char* __ASTREE_restrict buf, int mode, size_t size);

#ifdef __ASTREE_POSIX__
FILE *fdopen(int fd, const char *mode);
#endif /* __ASTREE_POSIX__ */

int fprintf(FILE* __ASTREE_restrict stream, const char* __ASTREE_restrict format, ...);
int fscanf(FILE* __ASTREE_restrict stream, const char* __ASTREE_restrict format, ...);
int printf(const char* __ASTREE_restrict format, ...);
int scanf(const char* __ASTREE_restrict format, ...);
int sprintf(char* __ASTREE_restrict sm, const char* __ASTREE_restrict format, ...);
int sscanf(const char* __ASTREE_restrict sm, const char* __ASTREE_restrict format, ...);
int snprintf(char* __ASTREE_restrict s, size_t n, const char* __ASTREE_restrict format, ...);

int vfprintf(FILE* __ASTREE_restrict stream, const char* __ASTREE_restrict format, va_list arg);
int vfscanf(FILE* __ASTREE_restrict stream, const char* __ASTREE_restrict format, va_list arg);
int vprintf(const char* __ASTREE_restrict format, va_list arg);
int vscanf(const char* __ASTREE_restrict format, va_list arg);
int vsnprintf(char* __ASTREE_restrict s, size_t n, const char* __ASTREE_restrict format, va_list arg);
int vsprintf(char* __ASTREE_restrict s, const char* __ASTREE_restrict format, va_list arg);
int vsscanf(const char* __ASTREE_restrict s, const char* __ASTREE_restrict format, va_list arg);

int fgetc(FILE* stream);
char* fgets(char* __ASTREE_restrict s, int n, FILE* __ASTREE_restrict stream);
int fputc(int c, FILE* stream);
int fputs(const char* __ASTREE_restrict s, FILE* __ASTREE_restrict stream);
int getc(FILE* stream);
int getchar(void);
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ < 201112L) || (defined(__cplusplus) && __cplusplus < 201402L)
char* gets(char* s); /* removed in c11 */
#endif
int putc(int c, FILE* stream);
int putchar(int c);
int puts(const char* s);
int ungetc(int c, FILE* stream);
size_t fread(void* __ASTREE_restrict ptr, size_t size, size_t nmemb, FILE* __ASTREE_restrict stream);
size_t fwrite(const void* __ASTREE_restrict ptr, size_t size, size_t nmemb, FILE* __ASTREE_restrict stream);
int fgetpos(FILE* __ASTREE_restrict stream, fpos_t* __ASTREE_restrict pos);
int fseek(FILE* stream, long int offset, int whence);
int fsetpos(FILE* stream, const fpos_t* pos);
long int ftell(FILE* stream);
void rewind(FILE* stream);
void clearerr(FILE* stream);
int feof(FILE* stream);
int ferror(FILE* stream);
void perror(const char* s);

#ifdef __cplusplus
/* snprintf */
int vasprintf(char **sptr, const char *__restrict fmt, va_list ap);
#endif

#ifdef __cplusplus
}
#endif

/* RULECHECKER_suppress(rules-category) */
__ASTREE_attributes((coverage_ignore, raise_at_caller, hide_directives));
