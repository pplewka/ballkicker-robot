/* ----------------------------------------------------------------------
 *    AbsInt -- Angewandte Informatik GmbH
 *    http://www.AbsInt.de/
 * ----------------------------------------------------------------------
 *
 * Example implementation of the ISO/IEC 9899:1999 (E) standard C
 * library for static program analyses with Astree.
 *
 * Developed and distributed by AbsInt, under license from the CNRS/ENS.
 * ---------------------------------------------------------------------- */

#pragma once

#include <astree_config.h>
#include <stddef.h>
#include <stdio.h>
#include <astree_restrict.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef unsigned mbstate_t;
struct tm;

#ifndef _HAVE_TYPEDEF_WINT_T
#define _HAVE_TYPEDEF_WINT_T
typedef __ASTREE_WINT_T wint_t;
#endif

#undef WCHAR_MIN
#undef WCHAR_MAX
#undef WEOF

#ifdef __ASTREE_WCHAR_MIN
#define WCHAR_MIN __ASTREE_WCHAR_MIN
#else
#define WCHAR_MIN __ASTREE_CHAR_MIN
#endif

#ifdef __ASTREE_WCHAR_MAX
#define WCHAR_MAX __ASTREE_WCHAR_MAX
#else
#define WCHAR_MAX __ASTREE_CHAR_MAX
#endif

#ifdef __ASTREE_WEOF
#define WEOF (__ASTREE_WEOF)
#else
#define WEOF ((wint_t) -1)
#endif

int fwprintf(FILE * __ASTREE_restrict stream, const wchar_t * __ASTREE_restrict format, ...);
int fwscanf(FILE * __ASTREE_restrict stream, const wchar_t * __ASTREE_restrict format, ...);
int swprintf(wchar_t * __ASTREE_restrict s, size_t n, const wchar_t * __ASTREE_restrict format, ...);
int swscanf(const wchar_t * __ASTREE_restrict s, const wchar_t * __ASTREE_restrict format, ...);
int wprintf(const wchar_t * __ASTREE_restrict format, ...);
int wscanf(const wchar_t * __ASTREE_restrict format, ...);

int vfwprintf(FILE * __ASTREE_restrict stream, const wchar_t * __ASTREE_restrict format, va_list arg);
int vfwscanf(FILE * __ASTREE_restrict stream, const wchar_t * __ASTREE_restrict format, va_list arg);
int vswprintf(wchar_t * __ASTREE_restrict s, size_t n, const wchar_t * __ASTREE_restrict format, va_list arg);
int vswscanf(const wchar_t * __ASTREE_restrict s, const wchar_t * __ASTREE_restrict format, va_list arg);
int vwprintf(const wchar_t * __ASTREE_restrict format, va_list arg);
int vwscanf(const wchar_t * __ASTREE_restrict format, va_list arg);
wint_t fgetwc(FILE *stream);
wchar_t *fgetws(wchar_t * __ASTREE_restrict s, int n, FILE * __ASTREE_restrict stream);
wint_t fputwc(wchar_t c, FILE *stream);
int fputws(const wchar_t * __ASTREE_restrict s, FILE * __ASTREE_restrict stream);
int fwide(FILE *stream, int mode);
wint_t getwc(FILE *stream);
wint_t getwchar(void);
wint_t putwc(wchar_t c, FILE *stream);
wint_t putwchar(wchar_t c);
wint_t ungetwc(wint_t c, FILE *stream);
double wcstod(const wchar_t * __ASTREE_restrict nptr, wchar_t ** __ASTREE_restrict endptr);
float wcstof(const wchar_t * __ASTREE_restrict nptr, wchar_t ** __ASTREE_restrict endptr);
long double wcstold(const wchar_t * __ASTREE_restrict nptr, wchar_t ** __ASTREE_restrict endptr);
long int wcstol(const wchar_t * __ASTREE_restrict nptr, wchar_t ** __ASTREE_restrict endptr, int base);
long long int wcstoll(const wchar_t * __ASTREE_restrict nptr, wchar_t ** __ASTREE_restrict endptr, int base);
unsigned long int wcstoul(const wchar_t * __ASTREE_restrict nptr, wchar_t ** __ASTREE_restrict endptr, int base);
unsigned long long int wcstoull(const wchar_t * __ASTREE_restrict nptr, wchar_t ** __ASTREE_restrict endptr, int base);
wchar_t *wcscpy(wchar_t * __ASTREE_restrict s1, const wchar_t * __ASTREE_restrict s2);
wchar_t *wcsncpy(wchar_t * __ASTREE_restrict s1, const wchar_t * __ASTREE_restrict s2, size_t n);
wchar_t *wcscat(wchar_t * __ASTREE_restrict s1, const wchar_t * __ASTREE_restrict s2);
wchar_t *wcsncat(wchar_t * __ASTREE_restrict s1, const wchar_t * __ASTREE_restrict s2, size_t n);
int wcscmp(const wchar_t *s1, const wchar_t *s2);
int wcscoll(const wchar_t *s1, const wchar_t *s2);
int wcsncmp(const wchar_t *s1, const wchar_t *s2, size_t n);
size_t wcsxfrm(wchar_t * __ASTREE_restrict s1, const wchar_t * __ASTREE_restrict s2, size_t n);
wchar_t *wcschr(const wchar_t *s, wchar_t c);
size_t wcscspn(const wchar_t *s1, const wchar_t *s2);
size_t wcslen(const wchar_t *s);
wchar_t *wcspbrk(const wchar_t *s1, const wchar_t *s2);
wchar_t *wcsrchr(const wchar_t *s, wchar_t c);
size_t wcsspn(const wchar_t *s1, const wchar_t *s2);
wchar_t *wcsstr(const wchar_t *s1, const wchar_t *s2);
wchar_t *wcstok(wchar_t * __ASTREE_restrict s1, const wchar_t * __ASTREE_restrict s2,
  wchar_t ** __ASTREE_restrict ptr);
wchar_t *wmemchr(const wchar_t *s, wchar_t c, size_t n);
int wmemcmp(const wchar_t *s1, const wchar_t *s2, size_t n);
wchar_t *wmemcpy(wchar_t *s1, const wchar_t *s2, size_t n);
wchar_t *wmemmove(wchar_t *s1, const wchar_t *s2, size_t n);
wchar_t *wmemset(wchar_t *s, wchar_t c, size_t n);
size_t wcsftime(wchar_t * __ASTREE_restrict s, size_t maxsize, const wchar_t * __ASTREE_restrict format, const struct tm * __ASTREE_restrict timeptr);
wint_t btowc(int c);
int wctob(wint_t c);
int mbsinit(const mbstate_t *ps);
size_t mbrlen(const char * __ASTREE_restrict s, size_t n, mbstate_t * __ASTREE_restrict ps);
size_t mbrtowc(wchar_t * __ASTREE_restrict pwc, const char * __ASTREE_restrict s, size_t n, mbstate_t * __ASTREE_restrict ps);
size_t wcrtomb(char * __ASTREE_restrict s, wchar_t wc, mbstate_t * __ASTREE_restrict ps);
size_t mbsrtowcs(wchar_t * __ASTREE_restrict dst, const char ** __ASTREE_restrict src, size_t len, mbstate_t * __ASTREE_restrict ps);
size_t wcsrtombs(char * __ASTREE_restrict dst, const wchar_t ** __ASTREE_restrict src, size_t len, mbstate_t * __ASTREE_restrict ps);
#ifdef __cplusplus
size_t mbsnrtowcs(wchar_t * __ASTREE_restrict dst, const char ** __ASTREE_restrict src, size_t __nwc, size_t len, mbstate_t * __ASTREE_restrict ps);
size_t wcsnrtombs(char * __ASTREE_restrict dst, const wchar_t ** __ASTREE_restrict src, size_t __nwc, size_t len, mbstate_t * __ASTREE_restrict ps);
#endif

#ifdef __cplusplus
}
#endif

/* RULECHECKER_suppress(rules-category) */
__ASTREE_attributes((coverage_ignore, raise_at_caller, hide_directives));
