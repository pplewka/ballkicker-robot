/* ----------------------------------------------------------------------
 *    AbsInt -- Angewandte Informatik GmbH
 *    http://www.AbsInt.de/
 * ----------------------------------------------------------------------
 *
 * Example implementation of the ISO/IEC 9899:1999 (E) standard C
 * library for static program analyses with Astree.
 *
 * Developed and distributed by AbsInt, under license from the CNRS/ENS.
 * ---------------------------------------------------------------------- */

#pragma once

#include <astree_config.h>
#include <stddef.h>
#include <astree_restrict.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
    int quot;
    int rem;
} div_t;

typedef struct {
    long int quot;
    long int rem;
} ldiv_t;

typedef struct {
    long long int quot;
    long long int rem;
} lldiv_t;

#ifdef EXIT_FAILURE
#undef EXIT_FAILURE
#endif
#define EXIT_FAILURE 1
#ifdef EXIT_SUCCESS
#undef EXIT_SUCCESS
#endif
#define EXIT_SUCCESS 0

#undef RAND_MAX
#define RAND_MAX __ASTREE_INT_MAX

/* max bytes in multibyte char of current locale */
#ifdef MB_CUR_MAX
#undef MB_CUR_MAX
#endif
#define MB_CUR_MAX 2

double atof(const char *nptr);
int atoi(const char *nptr);
long int atol(const char *nptr);
long long int atoll(const char *nptr);
double strtod(const char * __ASTREE_restrict nptr, char ** __ASTREE_restrict endptr);
float strtof(const char * __ASTREE_restrict nptr, char ** __ASTREE_restrict endptr);
long double strtold(const char * __ASTREE_restrict nptr, char ** __ASTREE_restrict endptr);
long int strtol(const char * __ASTREE_restrict nptr, char ** __ASTREE_restrict endptr, int base);
long long int strtoll(const char * __ASTREE_restrict nptr, char ** __ASTREE_restrict endptr, int base);
unsigned long int strtoul(const char * __ASTREE_restrict nptr, char ** __ASTREE_restrict endptr, int base);
unsigned long long int strtoull(const char * __ASTREE_restrict nptr, char ** __ASTREE_restrict endptr, int base);
int rand(void);
void srand(unsigned int seed);
void *aligned_alloc(size_t alignment, size_t size); /* C11 */
void *calloc(size_t nmemb, size_t size);
void free(void *ptr);
void *malloc(size_t size);
void *realloc(void *ptr, size_t size);
_Noreturn void abort(void);
int atexit(void (*func)(void));
int at_quick_exit(void (*func)(void));
_Noreturn void exit(int status);
_Noreturn void _Exit(int status);
char *getenv(const char *name);
_Noreturn void quick_exit(int status);/* C11 */
int system(const char *string);
void *bsearch(const void *key, const void *base, size_t nmemb, size_t size,
int (*compar)(const void *, const void *));
void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
int abs(int j);
long int labs(long int j);
long long int llabs(long long int j);
div_t div(int numer, int denom);
ldiv_t ldiv(long int numer, long int denom);
lldiv_t lldiv(long long int numer, long long int denom);
int mblen(const char *s, size_t n);
int mbtowc(wchar_t * __ASTREE_restrict pwc, const char * __ASTREE_restrict s, size_t n);
int wctomb(char *s, wchar_t wchar);
size_t mbstowcs(wchar_t * __ASTREE_restrict pwcs, const char * __ASTREE_restrict s, size_t n);
size_t wcstombs(char * __ASTREE_restrict s, const wchar_t * __ASTREE_restrict pwcs, size_t n);

#ifdef __cplusplus
}
#endif

/* RULECHECKER_suppress(rules-category) */
__ASTREE_attributes((coverage_ignore, raise_at_caller, hide_directives));
