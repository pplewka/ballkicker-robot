/* ----------------------------------------------------------------------
 *    AbsInt -- Angewandte Informatik GmbH
 *    http://www.AbsInt.de/
 * ----------------------------------------------------------------------
 *
 * Example implementation of the ISO/IEC 9899:1999 (E) standard C
 * library for static program analyses with Astree.
 *
 * Developed and distributed by AbsInt, under license from the CNRS/ENS.
 * ---------------------------------------------------------------------- */

#pragma once

#include <stddef.h>
#include <signal.h>
#include <astree_restrict.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef CLOCKS_PER_SEC
#undef CLOCKS_PER_SEC
#endif
#define CLOCKS_PER_SEC ((clock_t)1000000)

#ifdef TIME_UTC
#undef TIME_UTC
#endif
#define TIME_UTC 1 /* C11 */

typedef unsigned long clock_t;

typedef unsigned long time_t;

struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};

clock_t clock(void);
double difftime(time_t time1, time_t time0);
time_t mktime(struct tm *timeptr);
time_t time(time_t *timer);

char *asctime(const struct tm *timeptr);
char *ctime(const time_t *timer);
struct tm *gmtime(const time_t *timer);
struct tm *localtime(const time_t *timer);
size_t strftime(char * __ASTREE_restrict s, size_t maxsize, const char * __ASTREE_restrict format, const struct tm * __ASTREE_restrict timeptr);


struct timespec { /* C11 */
    time_t tv_sec;
    long tv_nsec;
};
int timespec_get(struct timespec *ts, int base); /* C11 */
int nanosleep(const struct timespec *req, struct timespec *rem); /* POSIX */

#ifdef __cplusplus
}
#endif

/* RULECHECKER_suppress(rules-category) */
__ASTREE_attributes((coverage_ignore, raise_at_caller, hide_directives));
