/* ----------------------------------------------------------------------
 *    AbsInt -- Angewandte Informatik GmbH
 *    http://www.AbsInt.de/
 * ----------------------------------------------------------------------
 *
 * Example implementation of the ISO/IEC 9899:1999 (E) standard C
 * library for static program analyses with Astree.
 *
 * Developed and distributed by AbsInt, under license from the CNRS/ENS.
 * ---------------------------------------------------------------------- */

#pragma once

#include <astree_config.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef float float_t;
typedef double double_t;

#ifdef __ASTREE_CLANG_COMPATIBLE
#undef HUGE_VAL
#define HUGE_VAL  __builtin_huge_val()
#undef HUGE_VALF
#define HUGE_VALF __builtin_huge_valf()
#undef HUGE_VALL
#define HUGE_VALL __builtin_huge_vall()
#else
#undef HUGE_VAL
#define HUGE_VAL  __astree_huge_val()
#undef HUGE_VALF
#define HUGE_VALF __astree_huge_valf()
#undef HUGE_VALL
#define HUGE_VALL __astree_huge_vall()
#endif

#undef INFINITY
#define INFINITY HUGE_VALF

#undef NAN
#ifdef __ASTREE_CLANG_COMPATIBLE
#define NAN __builtin_nanf ("")
#else
#define NAN __astree_not_a_number()
#endif

/* macros required by the standard */
#undef FP_INFINITE
#define FP_INFINITE FP_INFINITE
#undef FP_NAN
#define FP_NAN FP_NAN
#undef FP_NORMAL
#define FP_NORMAL FP_NORMAL
#undef FP_SUBNORMAL
#define FP_SUBNORMAL FP_SUBNORMAL
#undef FP_ZERO
#define FP_ZERO FP_ZERO

enum {
    FP_INFINITE,
    FP_NAN,
    FP_NORMAL,
    FP_SUBNORMAL,
    FP_ZERO,
};

/* FP_FAST_FMA, FP_FAST_FMAF, FP_FAST_FMAL not supported */

#undef FP_ILOGB0
#define FP_ILOGB0 INT_MIN

#undef FP_ILOGBNAN
#define FP_ILOGBNAN INT_MIN

#undef MATH_ERRNO
#define MATH_ERRNO 1
#undef MATH_ERREXCEPT
#define MATH_ERREXCEPT 2

#undef math_errhandling
#define math_errhandling (MATH_ERRNO | MATH_ERREXCEPT)

typedef float __astree_float;
typedef double __astree_double;
typedef long double __astree_long_double;

#define isfinite(x) \
_Generic((x), \
  __astree_float:       (-__ASTREE_FLT_MAX  <= (x)) && ((x) <= __ASTREE_FLT_MAX), \
  __astree_double:      (-__ASTREE_DBL_MAX  <= (x)) && ((x) <= __ASTREE_DBL_MAX), \
  __astree_long_double: (-__ASTREE_LDBL_MAX <= (x)) && ((x) <= __ASTREE_LDBL_MAX))

#define isinf(x) \
_Generic((x), \
  __astree_float:       (((x)< -__ASTREE_FLT_MAX)  || ((x)> __ASTREE_FLT_MAX)), \
  __astree_double:      (((x)< -__ASTREE_DBL_MAX)  || ((x)> __ASTREE_DBL_MAX)), \
  __astree_long_double: (((x)< -__ASTREE_LDBL_MAX) || ((x)> __ASTREE_LDBL_MAX)))

#define isnormal(x) \
_Generic((x), \
  __astree_float:       (((-__ASTREE_FLT_MAX  <= (x)) && ((x) <= -__ASTREE_FLT_MIN))  || ((__ASTREE_FLT_MIN  <= (x)) && ((x) <= __ASTREE_FLT_MAX))), \
  __astree_double:      (((-__ASTREE_DBL_MAX  <= (x)) && ((x) <= -__ASTREE_DBL_MIN))  || ((__ASTREE_DBL_MIN  <= (x)) && ((x) <= __ASTREE_DBL_MAX))), \
  __astree_long_double: (((-__ASTREE_LDBL_MAX <= (x)) && ((x) <= -__ASTREE_LDBL_MIN)) || ((__ASTREE_LDBL_MIN <= (x)) && ((x) <= __ASTREE_LDBL_MAX))))

#define isnan(x) ((x)!=(x))

#define fpclassify(x) \
(isinf(x) \
? FP_INFINITE \
: isnan(x) \
? FP_NAN \
: isnormal(x) \
? FP_NORMAL \
: (x) == 0 \
? FP_ZERO \
: FP_SUBNORMAL \
)

static inline int __astree_signbit_f(float x)
{
    __ASTREE_attributes((raise_at_caller));
    int any = 0;
    __ASTREE_modify((any; [0, 1]));
    return (x) < 0.0f ? 1 : ((x) > 0.0f ? 0 : any);
}

static inline int __astree_signbit_d(double x)
{
    __ASTREE_attributes((raise_at_caller));
    int any = 0;
    __ASTREE_modify((any; [0, 1]));
    return (x) < 0.0 ? 1 : ((x) > 0.0 ? 0 : any);
}

static inline int __astree_signbit_ld(long double x)
{
    __ASTREE_attributes((raise_at_caller));
    int any = 0;
    __ASTREE_modify((any; [0, 1]));
    return (x) < 0.0L ? 1 : ((x) > 0.0L ? 0 : any);
}

#define signbit(x) \
_Generic((x),      \
  __astree_float:       __astree_signbit_f(x), \
  __astree_double:      __astree_signbit_d(x), \
  __astree_long_double: __astree_signbit_ld(x))

double acos(double x);
float acosf(float x);
long double acosl(long double x);
double asin(double x);
float asinf(float x);
long double asinl(long double x);
double atan(double x);
float atanf(float x);
long double atanl(long double x);
double atan2(double y, double x);
float atan2f(float y, float x);
long double atan2l(long double y, long double x);
double cos(double x);
float cosf(float x);
long double cosl(long double x);
double sin(double x);
float sinf(float x);
long double sinl(long double x);
double tan(double x);
float tanf(float x);
long double tanl(long double x);
double acosh(double x);
float acoshf(float x);
long double acoshl(long double x);
double asinh(double x);
float asinhf(float x);
long double asinhl(long double x);
double atanh(double x);
float atanhf(float x);
long double atanhl(long double x);
double cosh(double x);
float coshf(float x);
long double coshl(long double x);
double sinh(double x);
float sinhf(float x);
long double sinhl(long double x);
double tanh(double x);
float tanhf(float x);
long double tanhl(long double x);
double exp(double x);
float expf(float x);
long double expl(long double x);
double exp2(double x);
float exp2f(float x);
long double exp2l(long double x);
double expm1(double x);
float expm1f(float x);
long double expm1l(long double x);
double frexp(double value, int *exp);
float frexpf(float value, int *exp);
long double frexpl(long double value, int *exp);
int ilogb(double x);
int ilogbf(float x);
int ilogbl(long double x);
double ldexp(double x, int exp);
float ldexpf(float x, int exp);
long double ldexpl(long double x, int exp);
double log(double x);
float logf(float x);
long double logl(long double x);
double log10(double x);
float log10f(float x);
long double log10l(long double x);
double log1p(double x);
float log1pf(float x);
long double log1pl(long double x);
double log2(double x);
float log2f(float x);
long double log2l(long double x);
double logb(double x);
float logbf(float x);
long double logbl(long double x);
double modf(double value, double *iptr);
float modff(float value, float *iptr);
long double modfl(long double value, long double *iptr);
double scalbn(double x, int n);
float scalbnf(float x, int n);
long double scalbnl(long double x, int n);
double scalbln(double x, long int n);
float scalblnf(float x, long int n);
long double scalblnl(long double x, long int n);
double cbrt(double x);
float cbrtf(float x);
long double cbrtl(long double x);
double fabs(double x);
float fabsf(float x);
long double fabsl(long double x);
double hypot(double x, double y);
float hypotf(float x, float y);
long double hypotl(long double x, long double y);
double pow(double x, double y);
float powf(float x, float y);
long double powl(long double x, long double y);
double sqrt(double x);
float sqrtf(float x);
long double sqrtl(long double x);
double erf(double x);
float erff(float x);
long double erfl(long double x);
double erfc(double x);
float erfcf(float x);
long double erfcl(long double x);
double lgamma(double x);
float lgammaf(float x);
long double lgammal(long double x);
double tgamma(double x);
float tgammaf(float x);
long double tgammal(long double x);
double ceil(double x);
float ceilf(float x);
long double ceill(long double x);
double floor(double x);
float floorf(float x);
long double floorl(long double x);
double nearbyint(double x);
float nearbyintf(float x);
long double nearbyintl(long double x);
double rint(double x);
float rintf(float x);
long double rintl(long double x);
long int lrint(double x);
long int lrintf(float x);
long int lrintl(long double x);
long long int llrint(double x);
long long int llrintf(float x);
long long int llrintl(long double x);
double round(double x);
float roundf(float x);
long double roundl(long double x);
long int lround(double x);
long int lroundf(float x);
long int lroundl(long double x);
long long int llround(double x);
long long int llroundf(float x);
long long int llroundl(long double x);
double trunc(double x);
float truncf(float x);
long double truncl(long double x);
double fmod(double x, double y);
float fmodf(float x, float y);
long double fmodl(long double x, long double y);
double remainder(double x, double y);
float remainderf(float x, float y);
long double remainderl(long double x, long double y);
double remquo(double x, double y, int *quo);
float remquof(float x, float y, int *quo);
long double remquol(long double x, long double y, int *quo);
double copysign(double x, double y);
float copysignf(float x, float y);
long double copysignl(long double x, long double y);
double nan(const char *tagp);
float nanf(const char *tagp);
long double nanl(const char *tagp);
double nextafter(double x, double y);
float nextafterf(float x, float y);
long double nextafterl(long double x, long double y);
double nexttoward(double x, long double y);
float nexttowardf(float x, long double y);
long double nexttowardl(long double x, long double y);
double fdim(double x, double y);
float fdimf(float x, float y);
long double fdiml(long double x, long double y);
double fmax(double x, double y);
float fmaxf(float x, float y);
long double fmaxl(long double x, long double y);
double fmin(double x, double y);
float fminf(float x, float y);
long double fminl(long double x, long double y);
double fma(double x, double y, double z);
float fmaf(float x, float y, float z);
long double fmal(long double x, long double y, long double z);

#define isgreater(x, y) ((x) > (y))
#define isgreaterequal(x, y) ((x) >= (y))
#define isless(x, y) ((x) < (y))
#define islessequal(x, y) ((x) <= (y))
#define islessgreater(x, y) ({ \
    double __x = (x); \
    double __y = (y); \
    ((__x) < (__y) || (__x) > (__y)); \
})

#define isunordered(x, y) (isnan(x) || isnan(y))

#ifdef __cplusplus
}
#endif

/* RULECHECKER_suppress(rules-category) */
__ASTREE_attributes((coverage_ignore, raise_at_caller, hide_directives));
